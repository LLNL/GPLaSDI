lasdi.latent_space
==================

.. py:module:: lasdi.latent_space


Classes
-------

.. autoapisummary::

   lasdi.latent_space.MultiLayerPerceptron
   lasdi.latent_space.LatentSpace
   lasdi.latent_space.Autoencoder


Functions
---------

.. autoapisummary::

   lasdi.latent_space.initial_condition_latent


Package Contents
----------------

.. py:class:: MultiLayerPerceptron(layer_sizes, act_type='sigmoid', reshape_index=None, reshape_shape=None, threshold=0.1, value=0.0)

   Bases: :py:obj:`torch.nn.Module`


   .. py:attribute:: n_layers


   .. py:attribute:: layer_sizes


   .. py:attribute:: fcs
      :value: []



   .. py:attribute:: reshape_index


   .. py:attribute:: reshape_shape


   .. py:attribute:: act_type


   .. py:method:: forward(x)


   .. py:method:: init_weight()


.. py:function:: initial_condition_latent(param_grid, physics, autoencoder)

   Outputs the initial condition in the latent space: Z0 = encoder(U0)



.. py:class:: LatentSpace(physics, config)

   Bases: :py:obj:`torch.nn.Module`


   .. py:attribute:: qgrid_size


   .. py:attribute:: n_z


   .. py:method:: forward(x)


   .. py:method:: export()


   .. py:method:: load(dict_)

      .. rubric:: Notes

      This abstract class only checks if the variables in restart file are the same as the instance attributes.



.. py:class:: Autoencoder(physics, config)

   Bases: :py:obj:`LatentSpace`


   .. py:attribute:: space_dim


   .. py:attribute:: encoder


   .. py:attribute:: decoder


   .. py:method:: forward(x)


   .. py:method:: export()


   .. py:method:: load(dict_)

      .. rubric:: Notes

      This abstract class only checks if the variables in restart file are the same as the instance attributes.



