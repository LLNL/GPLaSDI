lasdi.timing
============

.. py:module:: lasdi.timing


Classes
-------

.. autoapisummary::

   lasdi.timing.Timer


Module Contents
---------------

.. py:class:: Timer

   .. py:attribute:: names
      :type:  dict


   .. py:attribute:: calls
      :type:  list
      :value: []



   .. py:attribute:: times
      :type:  list
      :value: []



   .. py:attribute:: starts
      :type:  list
      :value: []



   .. py:method:: start(name: str) -> None

      Starts a specific timer. The user must specify the name of the timer they want to start.
      The specified timer can not already be running!


      -------------------------------------------------------------------------------------------
      :Parameters: **name** (*A string specifying the name of the timer you want to start.*)

      -------------------------------------------------------------------------------------------
      :rtype: Nothing!



   .. py:method:: end(name: str) -> None

      Stops a specific timer. The user must specify the name of the timer they want to stop.


      -------------------------------------------------------------------------------------------
      :Parameters: **name** (*A string specifying the name of the timer you want to stop.*)

      -------------------------------------------------------------------------------------------
      :rtype: Nothing!



   .. py:method:: print() -> None

      This function reports information on every timer in self. It has no arguments and returns
      nothing.



   .. py:method:: export() -> dict

      This function extracts the names, calls, and times attributes of self, stores them in a
      dictionary, and then returns that dictionary. If you have another dictionary object,
      you can passed the returned dictionary to that object's load method to make that object
      into an identical copy of self.


      -------------------------------------------------------------------------------------------
      :Parameters: **None!**

      -------------------------------------------------------------------------------------------
      :returns: * *A dictionary housing the names, calls, and times attributes of self. The returned*
                * *dictionary has three keys* --

                  - names
                  - calls
                  - times
                * *names is a dictionary with string keys whose corresponding values are integer indexes. If a*
                * *particular timer was the k'th one added to self, then it's value in names will be k.*
                * *calls is a list whose k'th element specifies how many times the k'th timer was stopped.*
                * *times is a list whose k'th element specifies the total time recorded on the k'th timer.*



   .. py:method:: load(dict_: dict) -> None

      This function de-serializes a timer object, making self into an identical copy of a
      previously serialized timer object. Specifically, we replace self's names, calls, and
      times attributes using those in the passed dict_. We use this function to restore a
      timer object's state after loading from a checkpoint.


      -------------------------------------------------------------------------------------------
      :Parameters: * **dict_** (*This should be a dictionary with three keys:*) --

                     - names
                     - calls
                     - times
                   * **the corresponding values should be the names, calls, and times attributes of another timer**
                   * **object, respectively. We replace self's attributes with those the values in dict_. dict_**
                   * **should be the dictionary returned by calling export on a timer object.**

      -------------------------------------------------------------------------------------------
      :rtype: Nothing!



