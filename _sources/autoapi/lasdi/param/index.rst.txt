lasdi.param
===========

.. py:module:: lasdi.param


Attributes
----------

.. autoapisummary::

   lasdi.param.getParam1DSpace


Classes
-------

.. autoapisummary::

   lasdi.param.ParameterSpace


Functions
---------

.. autoapisummary::

   lasdi.param.get_1dspace_from_list
   lasdi.param.create_uniform_1dspace


Module Contents
---------------

.. py:function:: get_1dspace_from_list(config)

.. py:function:: create_uniform_1dspace(config)

.. py:data:: getParam1DSpace

.. py:class:: ParameterSpace(config)

   .. py:attribute:: param_list
      :value: []



   .. py:attribute:: param_name
      :value: []



   .. py:attribute:: n_param
      :value: 0



   .. py:attribute:: train_space
      :value: None



   .. py:attribute:: test_space
      :value: None



   .. py:attribute:: n_init
      :value: 0



   .. py:attribute:: test_grid_sizes
      :value: []



   .. py:attribute:: test_meshgrid
      :value: None



   .. py:method:: n_train()


   .. py:method:: n_test()


   .. py:method:: createInitialTrainSpace(param_list)


   .. py:method:: createInitialTrainSpaceForHull(param_list)

      If test_space is 'hull', then the provided training parameters must be
      points on the exterior of our training space. This function concatenates the provided
      training points into a 2D array.

      -------------------------------------------------------------------------------------------
      :Parameters: * **param_list** (*A list of parameter dictionaries. Each entry should be a dictionary with the*)
                   * **following keys** --

                     - name
                     - min
                     - max
                     - sample_size
                     - list
                     - log_scale false
                   * **-------------------------------------------------------------------------------------------**

      :returns: * *A 2d array of shape (d, k), where d is the number of points provided on the exterior of*
                * *the training space and k is the number of parameters (k == len(param_list)).*



   .. py:method:: createTestGridSpace(param_list)


   .. py:method:: createTestGridSpaceForHull(param_list)

      This function sets up an initial grid for the testing parameters when the test_space is
      'hull'. Here, we form a uniform grid over the given training parameters based on the
      provided min and max values of each parameter and specified number of samples. The function
      'createTestSpaceFromHull' will later be used to keep testing point which are in the
      convex hull of training points.

      This function is similar to the function 'createTestGridSpace', except we do not specify
      the 'test_space_type' value for any parameter.

      -------------------------------------------------------------------------------------------
      :Parameters: * **param_list** (*A list of parameter dictionaries. Each entry should be a dictionary with the*)
                   * **following keys** --

                     - name
                     - min
                     - max
                     - sample_size
                     - list
                     - log_scale
                   * **-------------------------------------------------------------------------------------------**

      :returns: * *A three element tuple.*
                * *The first is a list whose i'th element specifies the number of distinct values of the i'th*
                * *parameter we consider (this is the length of the i'th element of "paramRanges" below).*
                * *The second is a a tuple of k numpy ndarrays (where k = len(param_list)), the i'th one of*
                * *which is a k-dimensional array with shape (N0, ... , N{k - 1}), where Ni =*
                * *param_list[i].size whose i(0), ... , i(k - 1) element specifies the value of the i'th*
                * *parameter in the i(0), ... , i(k - 1)'th unique combination of parameter values.*
                * *The third one is a 2d array of parameter values. It has shape (M, k), where*
                * *M = \prod_{i = 0}^{k - 1} param_list[i].size.*



   .. py:method:: createTestHullSpace(param_list)

      This function sets up an initial grid for the testing parameters when the test_space is
      'hull'. Here, we form a uniform grid over the giving training parameters based on the
      provided min and max values of each parameter and specified number of samples. The function
      'createTestSpaceFromHull' will later be used to only keep values of this grid which are in
      the convex hull of our training parameters.

      This function is similar to the function 'createTestGridSpace', except we do not specify
      the 'test_space_type' value for any parameter.

      -------------------------------------------------------------------------------------------
      :Parameters: * **param_list** (*A list of parameter dictionaries. Each entry should be a dictionary with the*)
                   * **following keys** --

                     - name
                     - min
                     - max
                     - sample_size
                     - list
                     - log_scale
                   * **-------------------------------------------------------------------------------------------**

      :returns: * *A three element tuple.*
                * *The first is a list whose i'th element specifies the number of distinct values of the i'th*
                * *parameter we consider (this is the length of the i'th element of "paramRanges" below).*
                * *The second is a a tuple of k numpy ndarrays (where k = len(param_list)), the i'th one of*
                * *which is a k-dimensional array with shape (N0, ... , N{k - 1}), where Ni =*
                * *param_list[i].size whose i(0), ... , i(k - 1) element specifies the value of the i'th*
                * *parameter in the i(0), ... , i(k - 1)'th unique combination of parameter values.*
                * *The third one is a 2d array of parameter values. It has shape (M, k), where M is the*
                * *number of testing points after removing points outside the convex hull of training*
                * *parameters.*



   .. py:method:: getParameter(param_vector)

      convert numpy array parameter vector to a dict.
      Physics class takes the dict for solve/initial_condition.



   .. py:method:: createHyperMeshGrid(param_ranges)

      param_ranges: list of numpy 1d arrays, each corresponding to 1d parameter grid space.
                    The list size is equal to the number of parameters.

      Output: paramSpaces
          - tuple of numpy nd arrays, corresponding to each parameter.
            Dimension of the array equals to the number of parameters



   .. py:method:: createHyperGridSpace(mesh_grids)

      mesh_grids: tuple of numpy nd arrays, corresponding to each parameter.
                  Dimension of the array equals to the number of parameters

      Output: param_grid
          - numpy 2d array of size (grid size x number of parameters).

          grid size is the size of a numpy nd array.



   .. py:method:: appendTrainSpace(param)


   .. py:method:: export()


   .. py:method:: load(dict_)


